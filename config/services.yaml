# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
    openweathermap:
            api_key: '%env(OPENWEATHER_API_KEY)%'
            url: '%env(OPENWEATHERMAP_BASE_URL)%'
            url_current: '%env(OPENWEATHERMAP_CURRENT_URL)%'
            url_current_box: '%env(OPENWEATHERMAP_CURRENT_URL_BOX)%'
            url_current_find: '%env(OPENWEATHERMAP_CURRENT_URL_FIND)%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
            - '../src/Tests/'
            - '../src/Controller/'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller/'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    # Service Contract
    App\Service\Contract\CustomResponseInterface $response: '@App\Service\Response\VanillaResponse'
    App\Service\Contract\CustomResponseInterface $errorResponse: '@App\Service\Response\ErrorResponse'

    # Error handler/convert exceptions from HTML to JSON.
    App\Service\ErrorHandler:
        tags:
            - { name: kernel.event_listener, event: kernel.exception }